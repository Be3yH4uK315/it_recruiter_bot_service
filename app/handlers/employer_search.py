from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from typing import Dict, Any
from app.states.employer import EmployerSearch
from app.services.api_client import employer_api_client, search_api_client, candidate_api_client, file_api_client
from app.keyboards.inline import get_liked_candidate_keyboard, get_initial_search_keyboard, SearchResultAction, SearchResultDecision

router = Router()

# --- FORMAT PROFILE ---
def format_candidate_profile(profile: Dict[str, Any]) -> str:
    text = (
        f"<b>üë§ –ò–º—è:</b> {profile.get('display_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {profile.get('headline_role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üìà –û–ø—ã—Ç:</b> {profile.get('experience_years', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
        f"<b>üìç –õ–æ–∫–∞—Ü–∏—è:</b> {profile.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>üíª –§–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç—ã:</b> {', '.join(profile.get('work_modes') or ['–ù–µ —É–∫–∞–∑–∞–Ω—ã'])}\n"
    )

    skills = profile.get('skills', [])
    if skills:
        hard_skills = [s['skill'] for s in skills if s['kind'] == 'hard']
        tools = [s['skill'] for s in skills if s['kind'] == 'tool']

        skills_text = "\n<b>üõ† –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"
        if hard_skills:
            skills_text += f" ‚Ä¢ <b>Hard Skills:</b> {', '.join(hard_skills)}\n"
        if tools:
            skills_text += f" ‚Ä¢ <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b> {', '.join(tools)}\n"
        text += skills_text

    projects = profile.get('projects', [])
    if projects:
        projects_text = "\n<b>üöÄ –ü—Ä–æ–µ–∫—Ç—ã:</b>\n"
        for p in projects:
            projects_text += f"  - <b>{p.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            if p.get('description'):
                projects_text += f"    <i>{p.get('description')}</i>\n"
            if p.get('links') and p['links'].get('main_link'):
                 projects_text += f"    <a href='{p['links']['main_link']}'>–°—Å—ã–ª–∫–∞</a>\n"
        text += projects_text

    return text


async def show_candidate_profile(message: types.Message | types.CallbackQuery, state: FSMContext, session_id: str):
    data = await state.get_data()
    idx = data.get('current_index', 0)
    candidate_ids = data.get('found_candidates', [])

    target_message = message.message if isinstance(message, types.CallbackQuery) else message

    if not candidate_ids or idx >= len(candidate_ids):
        await target_message.answer("–ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ /search.")
        if isinstance(message, types.CallbackQuery):
            await message.answer()
        await state.clear()
        return

    candidate_id = candidate_ids[idx]
    profile = await candidate_api_client.get_candidate(candidate_id)

    if not profile:
        await target_message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ª–µ–¥—É—é—â–µ–≥–æ.")
        await state.update_data(current_index=idx + 1)
        await show_candidate_profile(message, state, session_id)
        return

    avatar_url = None
    if profile.get("avatars"):
        avatar_file_id = profile["avatars"][0]["file_id"]
        avatar_url = await file_api_client.get_download_url_by_file_id(avatar_file_id)

    caption = format_candidate_profile(profile)
    has_resume = bool(profile.get("resumes"))
    keyboard = get_initial_search_keyboard(candidate_id, has_resume)

    if avatar_url:
        await target_message.answer_photo(
            photo=avatar_url,
            caption=caption,
            reply_markup=keyboard
        )
    else:
        await target_message.answer(
            text=caption,
            reply_markup=keyboard
        )

    if isinstance(message, types.CallbackQuery):
        await message.answer()

# --- EMPLOYER SEARCH ---
# --- ROLE ---
@router.message(EmployerSearch.entering_role)
async def handle_search_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await state.set_state(EmployerSearch.entering_must_skills)
    await message.answer("<b>–®–∞–≥ 2/5:</b> –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

# --- SKILLS ---
@router.message(EmployerSearch.entering_must_skills)
async def handle_search_skills(message: types.Message, state: FSMContext):
    skills = [s.strip().lower() for s in message.text.split(',')]
    await state.update_data(must_skills=skills)
    await state.set_state(EmployerSearch.entering_nice_skills)
    await message.answer("<b>–®–∞–≥ 3/5:</b> –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–ª–∏ /skip)")

@router.message(Command("skip"), EmployerSearch.entering_nice_skills)
@router.message(EmployerSearch.entering_nice_skills)
async def handle_nice_skills(message: types.Message, state: FSMContext):
    if message.text != "/skip":
        skills = [s.strip().lower() for s in message.text.split(',')]
        await state.update_data(nice_skills=skills)

    await state.set_state(EmployerSearch.entering_experience)
    await message.answer("<b>–®–∞–≥ 4/5:</b> –ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2-5)")

# --- EXPERIENCE YEARS ---
@router.message(EmployerSearch.entering_experience)
async def handle_search_experience(message: types.Message, state: FSMContext):
    try:
        parts = message.text.replace(',', '.').split('-')
        exp_min = float(parts[0].strip())
        exp_max = float(parts[1].strip()) if len(parts) > 1 else None
        await state.update_data(experience_min=exp_min, experience_max=exp_max)
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –∏–ª–∏ 2-5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.set_state(EmployerSearch.entering_location_and_work_modes)
    await message.answer("<b>–®–∞–≥ 5/5:</b> –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ª–æ–∫–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç—ã. (–Ω–∞–ø—Ä–∏–º–µ—Ä, EU remote, –∏–ª–∏ /skip)")

# --- LOCATION AND START ---
@router.message(Command("skip"), EmployerSearch.entering_location_and_work_modes)
@router.message(EmployerSearch.entering_location_and_work_modes)
async def handle_location_and_start_search(message: types.Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(location_query=message.text)

    await message.answer("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...", reply_markup=types.ReplyKeyboardRemove())

    employer_profile = await employer_api_client.get_or_create_employer(message.from_user.id, message.from_user.username)
    if not employer_profile:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return
    await state.update_data(employer_profile=employer_profile)

    filters = await state.get_data()

    search_session = await employer_api_client.create_search_session(employer_profile['id'], filters)
    if not search_session:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    session_id = search_session['id']
    await state.update_data(session_id=session_id)

    search_results = await search_api_client.search_candidates(filters)
    if not search_results:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏.")
        await state.clear()
        return

    candidate_ids = [res['candidate_id'] for res in search_results]
    await state.update_data(found_candidates=candidate_ids, current_index=0)
    await state.set_state(EmployerSearch.showing_results)

    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidate_ids)}. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤–æ–≥–æ:")
    await show_candidate_profile(message, state, session_id)

async def process_next_candidate(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_id = data.get("session_id")
    if not session_id:
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
        return

    new_index = data.get('current_index', 0) + 1
    await state.update_data(current_index=new_index)

    await callback.message.delete()
    await show_candidate_profile(callback, state, session_id)
    await callback.answer()

# --- DECISION ---
@router.callback_query(SearchResultDecision.filter(), EmployerSearch.showing_results)
async def handle_decision(callback: types.CallbackQuery, callback_data: SearchResultDecision, state: FSMContext):
    data = await state.get_data()
    session_id = data.get("session_id")

    if not session_id:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    success = await employer_api_client.save_decision(
        session_id=session_id,
        candidate_id=callback_data.candidate_id,
        decision=callback_data.action
    )

    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä.", show_alert=True)
        return

    if callback_data.action == "like":
        await callback.answer("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–π.")
        new_keyboard = get_liked_candidate_keyboard(callback_data.candidate_id)
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    else:
        await callback.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        await process_next_candidate(callback, state)

# --- NEXT ---
@router.callback_query(SearchResultAction.filter(F.action == "next"), EmployerSearch.showing_results)
async def handle_next_candidate(callback: types.CallbackQuery, state: FSMContext):
    await process_next_candidate(callback, state)

# --- CONTACTS ---
@router.callback_query(SearchResultAction.filter(F.action == "contact"), EmployerSearch.showing_results)
async def handle_show_contact(callback: types.CallbackQuery, callback_data: SearchResultAction, state: FSMContext):
    data = await state.get_data()
    employer_profile = data.get('employer_profile')
    if not employer_profile:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    await callback.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–Ω—Ç–∞–∫—Ç—ã...", show_alert=False)

    response = await employer_api_client.request_contacts(
        employer_id=employer_profile['id'],
        candidate_id=callback_data.candidate_id
    )

    if not response:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")
        return

    if response.get("granted") and response.get("contacts"):
        contacts = response["contacts"]
        contact_text = "\n".join([f"<b>{key.capitalize()}:</b> {value}" for key, value in contacts.items()])
        await callback.message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω. –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n{contact_text}")
    else:
        await callback.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ö–∞–Ω–¥–∏–¥–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.")

# --- RESUME ---
@router.callback_query(SearchResultAction.filter(F.action == "get_resume"), EmployerSearch.showing_results)
async def handle_get_resume(callback: types.CallbackQuery, callback_data: SearchResultAction, state: FSMContext):
    await callback.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å...")

    profile = await candidate_api_client.get_candidate(callback_data.candidate_id)

    if not profile or not profile.get("resumes"):
        await callback.message.answer("–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.")
        return

    file_id = profile["resumes"][0]["file_id"]

    await callback.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª...")

    link = await file_api_client.get_download_url_by_file_id(file_id)

    if link:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=link)]
        ])
        await callback.message.answer(
            "üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç):",
            reply_markup=keyboard
        )
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ. –°–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
