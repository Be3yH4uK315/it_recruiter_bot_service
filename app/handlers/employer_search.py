from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from typing import Dict, Any

from app.states.employer import EmployerSearch
from app.services.api_client import employer_api_client, search_api_client, candidate_api_client
from app.keyboards.inline import get_search_results_keyboard, SearchResultAction

router = Router()

def format_candidate_profile(profile: Dict[str, Any]) -> str:
    skills = ", ".join(skill['skill'] for skill in profile.get('skills', []))
    return (
        f"üë§ <b>{profile.get('display_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
        f"<i>{profile.get('headline_role', '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}</i>\n\n"
        f"<b>–û–ø—ã—Ç:</b> {profile.get('experience_years', 0)} –ª–µ—Ç\n"
        f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills if skills else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {profile.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

async def show_candidate_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data['current_index']
    candidate_ids = data['found_candidates']

    candidate_id = candidate_ids[idx]
    profile = await candidate_api_client.get_candidate(candidate_id)

    if not profile:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    is_last = (idx + 1) >= len(candidate_ids)
    keyboard = get_search_results_keyboard(candidate_id, is_last)
    await message.answer(format_candidate_profile(profile), reply_markup=keyboard)


@router.message(EmployerSearch.entering_role)
async def handle_search_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await state.set_state(EmployerSearch.entering_must_skills)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã? (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

@router.message(EmployerSearch.entering_must_skills)
async def handle_search_skills(message: types.Message, state: FSMContext):
    skills = [s.strip().lower() for s in message.text.split(',')]
    await state.update_data(must_skills=skills)
    await state.set_state(EmployerSearch.entering_experience)
    await message.answer("–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3)")

@router.message(EmployerSearch.entering_experience)
async def handle_search_experience(message: types.Message, state: FSMContext):
    try:
        exp = float(message.text.replace(',', '.'))
        await state.update_data(experience_min=exp)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await message.answer("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...", reply_markup=types.ReplyKeyboardRemove())
    filters = await state.get_data()


    employer_profile = await employer_api_client.get_or_create_employer(message.from_user.id, message.from_user.username)
    if not employer_profile:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return

    await employer_api_client.create_search_session(employer_profile['id'], filters)

    search_results = await search_api_client.search_candidates(filters)
    if not search_results:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏.")
        await state.clear()
        return

    candidate_ids = [res['candidate_id'] for res in search_results]
    await state.update_data(found_candidates=candidate_ids, current_index=0)
    await state.set_state(EmployerSearch.showing_results)

    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidate_ids)}. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤–æ–≥–æ:")
    await show_candidate_profile(message, state)


@router.callback_query(SearchResultAction.filter(F.action == "next"), EmployerSearch.showing_results)
async def handle_next_candidate(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    new_index = data['current_index'] + 1
    await state.update_data(current_index=new_index)

    await callback.message.edit_reply_markup(reply_markup=None)
    await show_candidate_profile(callback.message, state)
    await callback.answer()

@router.callback_query(SearchResultAction.filter(F.action == "contact"), EmployerSearch.showing_results)
async def handle_show_contact(callback: types.CallbackQuery, callback_data: SearchResultAction, state: FSMContext):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)