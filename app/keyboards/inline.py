from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from typing import Literal, Set

class ContactsVisibilityCallback(CallbackData, prefix="vis"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    visibility: str

class SkillKindCallback(CallbackData, prefix="skill_kind"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–≤—ã–∫–∞."""
    kind: str

class SkillLevelCallback(CallbackData, prefix="skill_level"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞."""
    level: int

class ConfirmationCallback(CallbackData, prefix="confirm"):
    """Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π."""
    action: Literal["yes", "no"]
    step: str

class RoleCallback(CallbackData, prefix="role"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    role_name: str

class EditFieldCallback(CallbackData, prefix="edit_field"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    field_name: str

class WorkModeCallback(CallbackData, prefix="work_mode"):
    """Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã."""
    mode: str

class ProfileAction(CallbackData, prefix="profile_action"):
    """Callback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º."""
    action: str

class SearchResultDecision(CallbackData, prefix="search_dec"):
    """Callback –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞."""
    action: str
    candidate_id: str

class SearchResultAction(CallbackData, prefix="search_res"):
    """Callback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞."""
    action: str
    candidate_id: str

def get_role_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üë§ –Ø –∫–∞–Ω–¥–∏–¥–∞—Ç",
                callback_data=RoleCallback(role_name="candidate").pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="üè¢ –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å",
                callback_data=RoleCallback(role_name="employer").pack(),
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_contacts_visibility_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="–ü–æ –∑–∞–ø—Ä–æ—Å—É (on_request)",
                callback_data=ContactsVisibilityCallback(visibility="on_request").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü—É–±–ª–∏—á–Ω—ã–µ (public)",
                callback_data=ContactsVisibilityCallback(visibility="public").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="–°–∫—Ä—ã—Ç—ã–µ (hidden)",
                callback_data=ContactsVisibilityCallback(visibility="hidden").pack()
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_work_modes_keyboard(selected: Set[str] = set()) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã (—Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏)."""
    modes = ["office", "remote", "hybrid", "done"]
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if m in selected else ''}{m.capitalize()}" if m != "done" else "–ì–æ—Ç–æ–≤–æ",
                callback_data=WorkModeCallback(mode=m).pack(),
            ) for m in modes
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_actions_keyboard(has_avatar: bool = False, has_resume: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º."""
    keyboard = [
        [InlineKeyboardButton(text="üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data=ProfileAction(action="upload_avatar").pack())],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=ProfileAction(action="edit").pack())],
        [InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data=ProfileAction(action="upload_resume").pack())]
    ]
    if has_avatar:
        keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É", callback_data=ProfileAction(action="delete_avatar").pack())])
    if has_resume:
        keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data=ProfileAction(action="delete_resume").pack())])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_initial_search_keyboard(candidate_id: str, has_resume: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üëç –ü–æ–¥—Ö–æ–¥–∏—Ç",
                callback_data=SearchResultDecision(action="like", candidate_id=candidate_id).pack()
            ),
            InlineKeyboardButton(
                text="üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç",
                callback_data=SearchResultDecision(action="dislike", candidate_id=candidate_id).pack()
            )
        ]
    ]

    if has_resume:
        keyboard.append([
            InlineKeyboardButton(
                text="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ",
                callback_data=SearchResultAction(action="get_resume", candidate_id=candidate_id).pack()
            )
        ])

    keyboard.append([
        InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
            callback_data=SearchResultAction(action="next", candidate_id="0").pack()
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_liked_candidate_keyboard(candidate_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìû –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                callback_data=SearchResultAction(action="contact", candidate_id=candidate_id).pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=SearchResultAction(action="next", candidate_id="0").pack()
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_edit_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    keyboard = [
        [
            InlineKeyboardButton(text="–ê–≤–∞—Ç–∞—Ä–∫–∞", callback_data=EditFieldCallback(field_name="avatar").pack()),
            InlineKeyboardButton(text="–§–ò–û", callback_data=EditFieldCallback(field_name="display_name").pack()),
        ],
        [
            InlineKeyboardButton(text="–î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=EditFieldCallback(field_name="headline_role").pack()),
            InlineKeyboardButton(text="–ù–∞–≤—ã–∫–∏", callback_data=EditFieldCallback(field_name="skills").pack()),
        ],
        [
            InlineKeyboardButton(text="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", callback_data=EditFieldCallback(field_name="experiences").pack()),
            InlineKeyboardButton(text="–õ–æ–∫–∞—Ü–∏—è", callback_data=EditFieldCallback(field_name="location").pack()),
        ],
        [
            InlineKeyboardButton(text="–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data=EditFieldCallback(field_name="work_modes").pack()),
            InlineKeyboardButton(text="–ü—Ä–æ–µ–∫—Ç—ã", callback_data=EditFieldCallback(field_name="projects").pack()),
        ],
        [
            InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=EditFieldCallback(field_name="contacts").pack()),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=EditFieldCallback(field_name="back").pack())
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_skill_kind_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–≤—ã–∫–∞."""
    buttons = [
        [InlineKeyboardButton(text="Hard Skill", callback_data=SkillKindCallback(kind="hard").pack())],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (Tool)", callback_data=SkillKindCallback(kind="tool").pack())],
        [InlineKeyboardButton(text="–Ø–∑—ã–∫ (Language)", callback_data=SkillKindCallback(kind="language").pack())],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skill_level_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞."""
    buttons = [
        [
            InlineKeyboardButton(text=str(i), callback_data=SkillLevelCallback(level=i).pack())
            for i in range(1, 6)
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirmation_keyboard(step: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=ConfirmationCallback(action="yes", step=step).pack()),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=ConfirmationCallback(action="no", step=step).pack())
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)